const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PROXY6
const PROXY6_CONFIG = {
    API_KEY: process.env.PROXY6_API_KEY,
    BASE_URL: 'https://proxy6.net/api'
};

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const CLIENTS_FILE = path.join(__dirname, 'clients.json');
const ADMINS_FILE = path.join(__dirname, 'admins.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
let clients = {}; // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { adminId: { clientName: { password, proxies, proxy6_order_id, proxy_expires_at } } }
let admins = [];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' }
            ],
            [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåç –ú–æ–π IP' },
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' } // NEW
            ],
            [
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
const superAdminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' }
            ],
            [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåç –ú–æ–π IP' },
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' } // NEW
            ],
            [
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' },
                { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' }
            ],
            [
                { text: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° PROXY6 API =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ PROXY6
async function checkProxy6Balance() {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return {
                success: false,
                error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            };
        }

        const response = await axios.get(`${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}`, {
            timeout: 10000
        });
        
        if (response.data.status === 'yes') {
            return {
                success: true,
                balance: response.data.balance,
                currency: response.data.currency,
                user_id: response.data.user_id
            };
        } else {
            return {
                success: false,
                error: response.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ PROXY6:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–æ–∫—Å–∏
async function getProxy6Price(count = 1, period = 7, version = 3) {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return {
                success: false,
                error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            };
        }

        const response = await axios.get(
            `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/getprice?count=${count}&period=${period}&version=${version}`,
            { timeout: 10000 }
        );
        
        if (response.data.status === 'yes') {
            return {
                success: true,
                price: response.data.price,
                price_single: response.data.price_single,
                period: response.data.period,
                count: response.data.count,
                balance: response.data.balance,
                currency: response.data.currency
            };
        } else {
            return {
                success: false,
                error: response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã'
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã PROXY6:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏
async function buyProxy6(count = 3, period = 7, country = 'ru', version = 3, descr = '') {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return {
                success: false,
                error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            };
        }

        const response = await axios.get(
            `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/buy?count=${count}&period=${period}&country=${country}&version=${version}&descr=${encodeURIComponent(descr)}`,
            { timeout: 15000 }
        );
        
        if (response.data.status === 'yes') {
            return {
                success: true,
                order_id: response.data.order_id,
                count: response.data.count,
                price: response.data.price,
                period: response.data.period,
                country: response.data.country,
                balance: response.data.balance,
                currency: response.data.currency,
                proxies: response.data.list
            };
        } else {
            return {
                success: false,
                error: response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏',
                error_id: response.data.error_id
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏ PROXY6:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ PROXY6 –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
function formatProxiesFromProxy6(proxies) {
    const formattedProxies = [];
    
    for (const proxyId in proxies) {
        const proxy = proxies[proxyId];
        // –§–æ—Ä–º–∞—Ç: host:port:user:pass
        formattedProxies.push(`${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`);
    }
    
    return formattedProxies;
}

// ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====

function loadClients() {
    try {
        if (fs.existsSync(CLIENTS_FILE)) {
            const data = fs.readFileSync(CLIENTS_FILE, 'utf8');
            clients = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
        clients = {};
    }
}

function saveClients() {
    try {
        fs.writeFileSync(CLIENTS_FILE, JSON.stringify(clients, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    }
}

function loadAdmins() {
    try {
        if (fs.existsSync(ADMINS_FILE)) {
            const data = fs.readFileSync(ADMINS_FILE, 'utf8');
            admins = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
        admins = [];
    }
}

function saveAdmins() {
    try {
        fs.writeFileSync(ADMINS_FILE, JSON.stringify(admins, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ –∞–¥–º–∏–Ω–∞–º
function getAdminClients(adminId) {
    if (!clients[adminId]) {
        clients[adminId] = {};
    }
    return clients[adminId];
}

function getAllClients() {
    const allClients = {};
    for (const [adminId, adminClients] of Object.entries(clients)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            allClients[`${clientName}_${adminId}`] = {
                ...clientData,
                adminId: adminId,
                originalName: clientName
            };
        }
    }
    return allClients;
}

function findClientByName(clientName, adminId = null) {
    if (adminId) {
        // –ò—â–µ–º —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        const adminClients = getAdminClients(adminId);
        if (adminClients[clientName]) {
            return {
                client: adminClients[clientName],
                adminId: adminId,
                clientName: clientName
            };
        }
    } else {
        // –ò—â–µ–º —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
        for (const [aId, adminClients] of Object.entries(clients)) {
            if (adminClients[clientName]) {
                return {
                    client: adminClients[clientName],
                    adminId: aId,
                    clientName: clientName
                };
            }
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
async function makeProxyServerRequest(endpoint, method = 'GET', data = null, auth = null) {
    try {
        const config = {
            method: method,
            url: `${PROXY_SERVER_URL}${endpoint}`,
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (auth) {
            config.auth = auth;
        }

        if (data && method !== 'GET') {
            config.data = data;
        }

        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É: ${method} ${config.url}`);
        if (data) console.log('üì§ –î–∞–Ω–Ω—ã–µ:', data);

        const response = await axios(config);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        if (error.response) {
            console.error('üì• –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', error.response.data);
        }
        throw error;
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function deleteClientFromServer(clientName) {
    try {
        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É: DELETE ${PROXY_SERVER_URL}/api/delete-client/${clientName}`);

        const response = await axios.delete(`${PROXY_SERVER_URL}/api/delete-client/${clientName}`, {
            timeout: 10000,
            headers: {
                'Accept': 'application/json'
            }
        });

        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        if (error.response) {
            console.log('üì• –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', error.response.data);
            // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404), —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            if (error.response.status === 404) {
                console.log('‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return { success: true, data: { message: 'Client not found on server' } };
            }
        }
        return { success: false, error: error.message };
    }
}

async function getCurrentProxy(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };

        const response = await makeProxyServerRequest(`/current`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}

async function getMyIP(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };

        const response = await makeProxyServerRequest(`/myip`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`);
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
async function syncAllClientsToServer(adminId = null) {
    const results = {
        success: 0,
        failed: 0,
        errors: []
    };

    const clientsToSync = adminId ? { [adminId]: getAdminClients(adminId) } : clients;

    for (const [aId, adminClients] of Object.entries(clientsToSync)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            try {
                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} (Admin: ${aId})`);
                
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: clientData.password,
                    proxies: clientData.proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                results.success++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:`, error.message);
                results.failed++;
                results.errors.push(`${clientName}: ${error.message}`);
            }
        }
    }

    return results;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthorized(userId) {
    return userId === SUPER_ADMIN_ID || admins.includes(userId);
}

function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getKeyboardForUser(userId) {
    return isSuperAdmin(userId) ? superAdminKeyboard : adminKeyboard;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–ö–£–ü–ö–ò –ü–†–û–ö–°–ò =====

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π"
async function handleAddUserWithPurchase(chatId, userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (!isAuthorized(userId)) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å PROXY6
        const balanceCheck = await checkProxy6Balance();
        if (!balanceCheck.success) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PROXY6: ${balanceCheck.error}`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 3 –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ª–æ–≥–∏–∫–µ)
        const priceCheck = await getProxy6Price(3, 7, 3);
        if (!priceCheck.success) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: ${priceCheck.error}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (parseFloat(balanceCheck.balance) < priceCheck.price) {
            await bot.sendMessage(chatId, 
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ PROXY6!\n\n` +
                `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
                `üí∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${priceCheck.price} ${priceCheck.currency}\n` +
                `üìä –¶–µ–Ω–∞ –∑–∞ 20 shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π`
            );
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates[userId] = {
            action: 'add_user_with_purchase',
            adminId: userId,
            step: 'waiting_username'
        };

        await bot.sendMessage(chatId, 
            `‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏!\n\n` +
            `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
            `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${priceCheck.price} ${priceCheck.currency}\n` +
            `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 20 shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π\n\n` +
            `üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:`
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleAddUserWithPurchase:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–∫—Å–∏
async function createUserWithProxyPurchase(userData) {
    try {
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏
        const purchaseResult = await buyProxy6(
            1, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            7, // –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            'ru', // —Å—Ç—Ä–∞–Ω–∞
            3, // IPv4 Shared
            `user_${userData.username}` // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        );
        
        if (!purchaseResult.success) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}`
            };
        }

        // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        const formattedProxies = formatProxiesFromProxy6(purchaseResult.proxies);
        
        // 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–∫—Å–∏
        const adminClients = getAdminClients(userData.adminId);
        adminClients[userData.username] = {
            password: userData.password,
            proxies: formattedProxies,
            proxy6_order_id: purchaseResult.order_id,
            proxy6_descr: `user_${userData.username}`,
            created_at: new Date().toISOString(),
            proxy_expires_at: new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString() // 7 –¥–Ω–µ–π
        };
        
        saveClients();
        
        return {
            success: true,
            user: adminClients[userData.username],
            username: userData.username,
            purchase_info: {
                order_id: purchaseResult.order_id,
                price: purchaseResult.price,
                count: purchaseResult.count,
                period: purchaseResult.period,
                balance_remaining: purchaseResult.balance
            }
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–∫—Å–∏:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        };
    }
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (NEW)
async function buyProxiesForExistingClient({ adminId, clientName, count = 1, period = 7, country = 'ru', version = 3 }) {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return { success: false, error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
        }

        // 1) –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏
        const purchaseResult = await buyProxy6(count, period, country, version, `user_${clientName}`);
        if (!purchaseResult.success) {
            return { success: false, error: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}` };
        }

        // 2) –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
        const formattedProxies = formatProxiesFromProxy6(purchaseResult.proxies);

        // 3) –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            return { success: false, error: `–ö–ª–∏–µ–Ω—Ç ${clientName} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
        }

        if (!Array.isArray(adminClients[clientName].proxies)) {
            adminClients[clientName].proxies = [];
        }

        adminClients[clientName].proxies.push(...formattedProxies);
        adminClients[clientName].proxy6_order_id = purchaseResult.order_id;
        adminClients[clientName].proxy6_descr = `user_${clientName}`;
        adminClients[clientName].proxy_expires_at = new Date(Date.now() + (period * 24 * 60 * 60 * 1000)).toISOString();

        saveClients();

        // 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
        try {
            await makeProxyServerRequest('/api/add-proxy', 'POST', {
                name: clientName,
                proxies: formattedProxies.map(formatProxyForRailway)
            });
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', err.message);
            // –õ–æ–∫–∞–ª—å–Ω–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–µ –ø–∞–¥–∞–µ–º
        }

        return {
            success: true,
            clientName,
            adminId,
            addedCount: formattedProxies.length,
            purchase_info: {
                order_id: purchaseResult.order_id,
                price: purchaseResult.price,
                count: purchaseResult.count,
                period: purchaseResult.period,
                balance_remaining: purchaseResult.balance,
                currency: purchaseResult.currency
            }
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ buyProxiesForExistingClient:', error);
        return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏' };
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleConfirmPurchase(chatId, userId) {
    const userState = userStates[userId];
    if (!userState || userState.action !== 'add_user_with_purchase') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    try {
        await bot.sendMessage(chatId, '‚è≥ –ü–æ–∫—É–ø–∞—é –ø—Ä–æ–∫—Å–∏ –∏ —Å–æ–∑–¥–∞—é –∫–ª–∏–µ–Ω—Ç–∞...');

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–∫—Å–∏
        const result = await createUserWithProxyPurchase({
            username: userState.username,
            password: userState.password,
            adminId: userState.adminId
        });

        if (result.success) {
            const purchaseInfo = result.purchase_info;
            const proxiesText = result.user.proxies.map((proxy, index) => 
                `${index + 1}. ${proxy}`
            ).join('\n');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: result.username,
                    password: result.user.password,
                    proxies: result.user.proxies.map(formatProxyForRailway)
                });
                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${result.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
            }

            await bot.sendMessage(chatId, 
                `‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∫—Å–∏ –∫—É–ø–ª–µ–Ω—ã!\n\n` +
                `üë§ –õ–æ–≥–∏–Ω: ${result.username}\n` +
                `üîê –ü–∞—Ä–æ–ª—å: ${result.user.password}\n\n` +
                `üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:\n${proxiesText}\n\n` +
                `üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ:\n` +
                `üÜî –ó–∞–∫–∞–∑: ${purchaseInfo.order_id}\n` +
                `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchaseInfo.price} RUB\n` +
                `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${purchaseInfo.count} –ø—Ä–æ–∫—Å–∏\n` +
                `‚è∞ –ü–µ—Ä–∏–æ–¥: ${purchaseInfo.period} –¥–Ω–µ–π\n` +
                `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${purchaseInfo.balance_remaining} RUB`,
                getKeyboardForUser(userId)
            );

        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.error}`, getKeyboardForUser(userId));
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleConfirmPurchase:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.', getKeyboardForUser(userId));
    } finally {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[userId];
    }
}

// ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    const username = msg.from.username || 'Unknown';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthorized(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdmin = isSuperAdmin(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    if (text === '/start') {
        const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!

üë§ –í–∞—à–∞ —Ä–æ–ª—å: ${superAdmin ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)' : '–ê–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)'}

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏!

üÜï –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏
‚Ä¢ üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - –±–∞–ª–∞–Ω—Å PROXY6 (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)`;

        await bot.sendMessage(chatId, welcomeMessage, getKeyboardForUser(userId));
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–∫—Å–∏
    if (text === 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' || text === '/addclientwithpurchase') {
        console.log(`üõí –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–∫—É–ø–∫–æ–π –æ—Ç userId=${userId}`);
        await handleAddUserWithPurchase(chatId, userId);
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (NEW)
    if (text === 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' || text === '/buy-proxy') {
        console.log(`üõç –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if (!isAuthorized(userId)) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏–ª–∏ –≤—Å–µ—Ö, –µ—Å–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏');
            return;
        }

        userStates[userId] = { action: 'buying_proxy', step: 'waiting_client_name' };

        let message = `üõç –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å 20 shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;

        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName
                ? `${client.originalName} (Admin: ${client.adminId})`
                : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `‚Ä¢ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)\n`;
        }

        await bot.sendMessage(chatId, message);
        return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
    if (text === 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞' || text === '/proxy6-balance') {
        console.log(`üí∞ –ö–æ–º–∞–Ω–¥–∞ /proxy6-balance –æ—Ç userId=${userId}`);

        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }

        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å PROXY6...');

        const balanceResult = await checkProxy6Balance();
        
        if (balanceResult.success) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ —Ü–µ–Ω—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            const priceResult = await getProxy6Price(3, 7, 3);
            
            let message = `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6:\n\n` +
                         `üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceResult.balance} ${balanceResult.currency}\n` +
                         `üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${balanceResult.user_id}\n`;
            
            if (priceResult.success) {
                const canBuy = Math.floor(parseFloat(balanceResult.balance) / priceResult.price);
                message += `\nüìä –°—Ç–æ–∏–º–æ—Å—Ç—å 20 shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π: ${priceResult.price} ${balanceResult.currency}\n` +
                          `üõí –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${canBuy} —Ç–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤`;
            }
            
            await bot.sendMessage(chatId, message);
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${balanceResult.error}`);
        }
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
    if (text === 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' || text === '/addclientwithproxies') {
        console.log(`üì• –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);
        userStates[userId] = { action: 'adding_client_with_proxies' };
        await bot.sendMessage(chatId, `üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`client1 mypassword123\`
\`31.129.21.214:9379:gNzocE:fnKaHc\`
\`45.91.65.201:9524:gNzocE:fnKaHc\`
\`45.91.65.235:9071:gNzocE:fnKaHc\`

–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å
–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass

‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –ù–ï –±—É–¥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    if (text === 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' || text === '/sync') {
        console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç userId=${userId}`);
        
        await bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

        try {
            const results = await syncAllClientsToServer(superAdmin ? null : userId);
            
            let message = `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}
‚ùå –û—à–∏–±–æ–∫: ${results.failed}`;

            if (results.errors.length > 0) {
                message += `\n\n‚ùå –û—à–∏–±–∫–∏:\n${results.errors.slice(0, 5).join('\n')}`;
                if (results.errors.length > 5) {
                    message += `\n... –∏ –µ—â–µ ${results.errors.length - 5} –æ—à–∏–±–æ–∫`;
                }
            }

            await bot.sendMessage(chatId, message);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
        return;
    }

    if (text === 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/addclient') {
        console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);
        userStates[userId] = { action: 'adding_client' };
        await bot.sendMessage(chatId, `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`user123 pass456\`

üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/deleteclient') {
        console.log(`üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üóëÔ∏è ${displayName}`,
                        callback_data: `delete_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboard);
        return;
    }

    if (text === 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' || text === 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' || text === '/clients') {
        console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ /clients –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç');
            return;
        }

        let message = `üìã –°–ø–∏—Å–æ–∫ ${superAdmin ? '–≤—Å–µ—Ö' : '–≤–∞—à–∏—Ö'} –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n`;
        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ?
                `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;

            message += `üë§ ${displayName}\n`;
            message += `   üîê –ü–∞—Ä–æ–ª—å: ${client.password}\n`;
            message += `   üåê –ü—Ä–æ–∫—Å–∏: ${proxyCount} —à—Ç.\n`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ PROXY6, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (client.proxy6_order_id) {
                message += `   üÜî –ó–∞–∫–∞–∑ PROXY6: ${client.proxy6_order_id}\n`;
            }
            if (client.proxy_expires_at) {
                const expiresAt = new Date(client.proxy_expires_at);
                message += `   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt.toLocaleDateString('ru-RU')}\n`;
            }
            message += `\n`;
        }

        await bot.sendMessage(chatId, message);
        return;
    }

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' || text === '/add-proxy') {
        console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        userStates[userId] = { action: 'adding_proxy' };

        let message = `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host:port:user:pass\`

–ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host1:port1:user1:pass1\`
\`host2:port2:user2:pass2\`

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;

        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ?
                `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `‚Ä¢ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)\n`;
        }

        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' || text === '/current-proxy') {
        console.log(`üåê –ö–æ–º–∞–Ω–¥–∞ /current-proxy –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üåê ${displayName}`,
                        callback_data: `current_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === 'üåç –ú–æ–π IP' || text === '/myip') {
        console.log(`üåç –ö–æ–º–∞–Ω–¥–∞ /myip –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üåç ${displayName}`,
                        callback_data: `myip_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:', keyboard);
        return;
    }

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (text === 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' || text === '/manageadmins') {
        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }

        const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
        const message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

üìã –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: ${adminsList}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚Ä¢ \`+123456789\` - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`-123456789\` - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`list\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤`;

        userStates[userId] = { action: 'managing_admins' };
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const buttonCommands = [
        'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
        'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã', 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏', 'üåç –ú–æ–π IP', 
        'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
        'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' // NEW
    ];

    if (buttonCommands.includes(text)) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if (userStates[userId]) {
            delete userStates[userId];
            console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: ${text}`);
        }
        await bot.sendMessage(chatId, `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.`, getKeyboardForUser(userId));
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userStates[userId]) {
        const state = userStates[userId];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if (state.action === 'add_user_with_purchase') {
            switch (state.step) {
                case 'waiting_username':
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
                    if (!text || text.length < 3) {
                        await bot.sendMessage(chatId, '‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    const existingUser = findClientByName(text, superAdmin ? null : userId);
                    if (existingUser) {
                        await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:');
                        return;
                    }

                    state.username = text;
                    state.step = 'waiting_password';
                    userStates[userId] = state;

                    await bot.sendMessage(chatId, `‚úÖ –õ–æ–≥–∏–Ω: ${text}\n\nüîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:`);
                    return;

                case 'waiting_password':
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                    if (!text || text.length < 4) {
                        await bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }

                    state.password = text;
                    state.step = 'confirming_purchase';
                    userStates[userId] = state;

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É', callback_data: 'confirm_purchase' },
                                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_purchase' }
                                ]
                            ]
                        }
                    };

                    await bot.sendMessage(chatId, 
                        `üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n` +
                        `üë§ –õ–æ–≥–∏–Ω: ${state.username}\n` +
                        `üîê –ü–∞—Ä–æ–ª—å: ${state.password}\n` +
                        `üì¶ –ü—Ä–æ–∫—Å–∏: 20 shared –Ω–∞ 7 –¥–Ω–µ–π\n` +
                        `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ PROXY6\n\n` +
                        `‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–∫—Å–∏?`,
                        keyboard
                    );
                    return;
            }
        }

        // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É (NEW)
        if (state.action === 'buying_proxy') {
            switch (state.step) {
                case 'waiting_client_name': {
                    const clientNameInput = text.trim();

                    // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π
                    const clientInfo = superAdmin
                        ? findClientByName(clientNameInput)
                        : findClientByName(clientNameInput, userId);

                    if (!clientInfo) {
                        await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientNameInput} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞`);
                        delete userStates[userId];
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ PROXY6
                    if (!PROXY6_CONFIG.API_KEY) {
                        await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                        delete userStates[userId];
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ü–µ–Ω—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ –ª–æ–≥–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–∫—É–ø–∫–æ–π)
                    await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –∏ —Ü–µ–Ω—É –≤ PROXY6...');
                    const balanceCheck = await checkProxy6Balance();
                    if (!balanceCheck.success) {
                        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PROXY6: ${balanceCheck.error}`);
                        delete userStates[userId];
                        return;
                    }

                    const priceCheck = await getProxy6Price(3, 7, 3);
                    if (!priceCheck.success) {
                        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: ${priceCheck.error}`);
                        delete userStates[userId];
                        return;
                    }

                    if (parseFloat(balanceCheck.balance) < priceCheck.price) {
                        await bot.sendMessage(chatId,
                            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ PROXY6!\n\n` +
                            `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
                            `üí∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${priceCheck.price} ${priceCheck.currency}\n` +
                            `üìä –¶–µ–Ω–∞ –∑–∞ 20 shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ 7 –¥–Ω–µ–π`
                        );
                        delete userStates[userId];
                        return;
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    userStates[userId] = {
                        action: 'buying_proxy',
                        step: 'confirming_buy',
                        clientName: clientInfo.clientName || clientNameInput,
                        adminId: clientInfo.adminId,
                        price: priceCheck.price,
                        currency: priceCheck.currency,
                        count: 1,
                        period: 7
                    };

                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É', callback_data: 'confirm_buy_client' },
                                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_buy_client' }
                                ]
                            ]
                        }
                    };

                    await bot.sendMessage(chatId,
                        `üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientInfo.clientName || clientNameInput}\n` +
                        `üì¶ –ü—Ä–æ–∫—Å–∏: 20 shared –Ω–∞ 7 –¥–Ω–µ–π\n` +
                        `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ PROXY6\n\n` +
                        `‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞?`,
                        keyboard
                    );
                    return;
                }
            }
        }

        // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        if (state.action === 'adding_client_with_proxies') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏');

            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ: –ø—Ä–æ–∫—Å–∏');
                return;
            }

            const firstLine = lines[0].trim().split(/\s+/);
            if (firstLine.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }

            const clientName = firstLine[0];
            const password = firstLine[1];
            const proxyLines = lines.slice(1);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
            const proxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) {
                        proxies.push(proxy);
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }

            if (proxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
            adminClients[clientName] = {
                password: password,
                proxies: proxies
            };

            saveClients();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
                const serverResponse = await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: password,
                    proxies: proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);

                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}
   
üì• –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –ø–æ–∫—É–ø–∫–∏`, getKeyboardForUser(userId));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`, getKeyboardForUser(userId));
            }

            delete userStates[userId];
            return;
        }

        if (state.action === 'adding_client') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');

            const lines = text.trim().split('\n');
            const parts = lines[0].trim().split(/\s+/);

            if (parts.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }

            const clientName = parts[0];
            const password = parts[1];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            adminClients[clientName] = {
                password: password,
                proxies: []
            };

            saveClients();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
                const serverResponse = await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: password,
                    proxies: adminClients[clientName].proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);

                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${adminClients[clientName].proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}`, getKeyboardForUser(userId));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${adminClients[clientName].proxies.length} –ø—Ä–æ–∫—Å–∏
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`, getKeyboardForUser(userId));
            }

            delete userStates[userId];
            return;
        }

        if (state.action === 'adding_proxy') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏');

            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\nhost:port:user:pass');
                return;
            }

            const clientName = lines[0].trim();
            const proxyLines = lines.slice(1);

            // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
            const clientInfo = superAdmin ?
                findClientByName(clientName) :
                findClientByName(clientName, userId);

            if (!clientInfo) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if (!superAdmin && clientInfo.adminId != userId) {
                await bot.sendMessage(chatId, `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
                delete userStates[userId];
                return;
            }

            // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
            const newProxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) {
                        newProxies.push(proxy);
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }

            if (newProxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
            const adminClients = getAdminClients(clientInfo.adminId);
            adminClients[clientInfo.clientName].proxies.push(...newProxies);
            saveClients();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            try {
                await makeProxyServerRequest('/api/add-proxy', 'POST', {
                    name: clientInfo.clientName,
                    proxies: newProxies.map(formatProxyForRailway)
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            }

            await bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newProxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}
üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${adminClients[clientInfo.clientName].proxies.length}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${clientInfo.adminId}`, getKeyboardForUser(userId));

            delete userStates[userId];
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        if (state.action === 'managing_admins' && superAdmin) {
            if (text === 'list') {
                const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
                await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${adminsList}`);
                return;
            }

            if (text.startsWith('+')) {
                const newAdminId = parseInt(text.substring(1));
                if (isNaN(newAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }

                if (admins.includes(newAdminId)) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }

                admins.push(newAdminId);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã`);
                return;
            }

            if (text.startsWith('-')) {
                const removeAdminId = parseInt(text.substring(1));
                if (isNaN(removeAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }

                const index = admins.indexOf(removeAdminId);
                if (index === -1) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }

                admins.splice(index, 1);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤`);
                return;
            }

            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +ID, -ID –∏–ª–∏ list');
            return;
        }
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', getKeyboardForUser(userId));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`üîò Callback: ${data} –æ—Ç userId=${userId}`);

    if (!isAuthorized(userId)) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
        return;
    }

    const superAdmin = isSuperAdmin(userId);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (NEW)
    if (data === 'confirm_buy_client') {
        const st = userStates[userId];
        if (!st || st.action !== 'buying_proxy' || st.step !== 'confirming_buy') {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.' });
            return;
        }

        try {
            await bot.editMessageText('‚è≥ –ü–æ–∫—É–ø–∞—é –ø—Ä–æ–∫—Å–∏ –∏ –¥–æ–±–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—É...', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });

            const result = await buyProxiesForExistingClient({
                adminId: st.adminId,
                clientName: st.clientName,
                count: 1,
                period: 7,
                country: 'ru',
                version: 3
            });

            if (result.success) {
                const info = result.purchase_info;
                await bot.editMessageText(
                    `‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É!\n\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${st.clientName}\n` +
                    `üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.addedCount} –ø—Ä–æ–∫—Å–∏\n\n` +
                    `üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ:\n` +
                    `üÜî –ó–∞–∫–∞–∑: ${info.order_id}\n` +
                    `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${info.price} ${info.currency || 'RUB'}\n` +
                    `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${info.count} –ø—Ä–æ–∫—Å–∏\n` +
                    `‚è∞ –ü–µ—Ä–∏–æ–¥: ${info.period} –¥–Ω–µ–π\n` +
                    `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${info.balance_remaining} ${info.currency || 'RUB'}`,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } else {
                await bot.editMessageText(
                    `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${result.error}`,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            }
        } catch (err) {
            await bot.editMessageText(
                `‚ùå –°–±–æ–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏: ${err.message}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        } finally {
            delete userStates[userId];
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        return;
    }

    // –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (NEW)
    if (data === 'cancel_buy_client') {
        delete userStates[userId];
        try {
            await bot.editMessageText('‚ùå –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
        } catch (e) {
            // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        }
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if (data === 'confirm_purchase') {
        await handleConfirmPurchase(chatId, userId);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if (data === 'cancel_purchase') {
        delete userStates[userId];
        await bot.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id
        });
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith('delete_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
        try {
            const deleteResult = await deleteClientFromServer(clientName);
            if (deleteResult.success) {
                console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', deleteResult.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        delete adminClients[clientName];
        saveClients();

        await bot.editMessageText(
            `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('current_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getCurrentProxy(clientName, adminClients[clientName].password);

            await bot.editMessageText(
                `üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.proxy || '–ù–µ –Ω–∞–π–¥–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
    if (data.startsWith('myip_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getMyIP(clientName, adminClients[clientName].password);

            await bot.editMessageText(
                `üåç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.ip || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadClients();
loadAdmins();

console.log('üöÄ Telegram Bot –∑–∞–ø—É—â–µ–Ω!');
console.log(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID: ${SUPER_ADMIN_ID}`);
console.log(`üë• –ê–¥–º–∏–Ω–æ–≤: ${admins.length}`);
console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${PROXY_SERVER_URL}`);
console.log(`üîë PROXY6 API: ${PROXY6_CONFIG.API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

// –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π health endpoint (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞)
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
    const totalClients = Object.values(clients).reduce((sum, adminClients) => sum + Object.keys(adminClients).length, 0);

    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        total_clients: totalClients,
        admins_count: admins.length,
        proxy_server: PROXY_SERVER_URL,
        proxy6_configured: !!PROXY6_CONFIG.API_KEY,
        clients_by_admin: Object.fromEntries(
            Object.entries(clients).map(([adminId, adminClients]) => [
                adminId, Object.keys(adminClients).length
            ])
        )
    });
});

app.listen(PORT, () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function formatProxyForRailway(proxy) {
    // PROXY6.net –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { host, port, user, pass, type }
    // –°–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç: "http://user:pass@host:port"

    if (typeof proxy === 'string') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ http://user:pass@host:port
        if (proxy.startsWith('http://') && proxy.includes('@')) {
            return proxy;
        }

        // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        const parts = proxy.split(':');
        if (parts.length === 4) {
            const [host, port, user, pass] = parts;
            return `http://${encodeURIComponent(user)}:${encodeURIComponent(pass)}@${host}:${port}`;
        }

        return proxy; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }

    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç PROXY6.net
    if (proxy && proxy.host && proxy.port && proxy.user && proxy.pass) {
        return `http://${encodeURIComponent(proxy.user)}:${encodeURIComponent(proxy.pass)}@${proxy.host}:${proxy.port}`;
    }

    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:', proxy);
    return null;
}
