const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';

// PROXY6.net –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROXY6_CONFIG = {
    API_KEY: process.env.PROXY6_API_KEY,
    BASE_URL: 'https://px6.link/api',
    DEFAULT_COUNT: 2,
    DEFAULT_PERIOD: 7,
    DEFAULT_COUNTRY: 'ru',
    DEFAULT_VERSION: 3 // IPv4 Shared
};

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const CLIENTS_FILE = path.join(__dirname, 'clients.json');
const ADMINS_FILE = path.join(__dirname, 'admins.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
let clients = {}; // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { adminId: { clientName: { password, proxies } } }
let admins = [];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' },
                { text: 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6' },
                { text: 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåç –ú–æ–π IP' }
            ],
            [
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
const superAdminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' },
                { text: 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6' },
                { text: 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåç –ú–æ–π IP' }
            ],
            [
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' }
            ],
            [
                { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' },
                { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

function loadClients() {
    try {
        if (fs.existsSync(CLIENTS_FILE)) {
            const data = fs.readFileSync(CLIENTS_FILE, 'utf8');
            clients = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
        clients = {};
    }
}

function saveClients() {
    try {
        fs.writeFileSync(CLIENTS_FILE, JSON.stringify(clients, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    }
}

function loadAdmins() {
    try {
        if (fs.existsSync(ADMINS_FILE)) {
            const data = fs.readFileSync(ADMINS_FILE, 'utf8');
            admins = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
        admins = [];
    }
}

function saveAdmins() {
    try {
        fs.writeFileSync(ADMINS_FILE, JSON.stringify(admins, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ –∞–¥–º–∏–Ω–∞–º
function getAdminClients(adminId) {
    if (!clients[adminId]) {
        clients[adminId] = {};
    }
    return clients[adminId];
}

function getAllClients() {
    const allClients = {};
    for (const [adminId, adminClients] of Object.entries(clients)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            allClients[`${clientName}_${adminId}`] = {
                ...clientData,
                adminId: adminId,
                originalName: clientName
            };
        }
    }
    return allClients;
}

function findClientByName(clientName, adminId = null) {
    if (adminId) {
        // –ò—â–µ–º —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        const adminClients = getAdminClients(adminId);
        if (adminClients[clientName]) {
            return {
                client: adminClients[clientName],
                adminId: adminId,
                clientName: clientName
            };
        }
    } else {
        // –ò—â–µ–º —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
        for (const [aId, adminClients] of Object.entries(clients)) {
            if (adminClients[clientName]) {
                return {
                    client: adminClients[clientName],
                    adminId: aId,
                    clientName: clientName
                };
            }
        }
    }
    return null;
}

// PROXY6.net API —Ñ—É–Ω–∫—Ü–∏–∏
async function proxy6Request(method, params = {}) {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            throw new Error('API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        const queryParams = new URLSearchParams(params).toString();
        const url = `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/${method}${queryParams ? '?' + queryParams : ''}`;

        const response = await axios.get(url, {
            timeout: 10000,
            headers: {
                'User-Agent': 'TelegramBot/1.0'
            }
        });

        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ PROXY6 –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        throw error;
    }
}

async function checkProxy6Balance() {
    try {
        const response = await proxy6Request('');
        if (response.status === 'yes') {
            return {
                success: true,
                balance: response.balance,
                currency: response.currency,
                user_id: response.user_id
            };
        } else {
            return {
                success: false,
                error: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

async function buyProxy6Proxies(count, period, country = 'ru', version = 3, descr = '') {
    try {
        const response = await proxy6Request('buy', {
            count: count,
            period: period,
            country: country,
            version: version,
            descr: descr
        });

        if (response.status === 'yes') {
            return {
                success: true,
                order_id: response.order_id,
                count: response.count,
                price: response.price,
                proxies: response.list
            };
        } else {
            return {
                success: false,
                error: response.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏'
            };
        }
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
async function makeProxyServerRequest(endpoint, method = 'GET', data = null, auth = null) {
    try {
        const config = {
            method: method,
            url: `${PROXY_SERVER_URL}${endpoint}`,
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (auth) {
            config.auth = auth;
        }

        if (data && method !== 'GET') {
            config.data = data;
        }

        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É: ${method} ${config.url}`);
        if (data) console.log('üì§ –î–∞–Ω–Ω—ã–µ:', data);

        const response = await axios(config);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        if (error.response) {
            console.error('üì• –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', error.response.data);
        }
        throw error;
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function deleteClientFromServer(clientName) {
    try {
        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É: DELETE ${PROXY_SERVER_URL}/api/delete-client/${clientName}`);

        const response = await axios.delete(`${PROXY_SERVER_URL}/api/delete-client/${clientName}`, {
            timeout: 10000,
            headers: {
                'Accept': 'application/json'
            }
        });

        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        if (error.response) {
            console.log('üì• –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', error.response.data);
            // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404), —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            if (error.response.status === 404) {
                console.log('‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return { success: true, data: { message: 'Client not found on server' } };
            }
        }
        return { success: false, error: error.message };
    }
}

async function rotateClientProxy(clientName) {
    try {
        const response = await makeProxyServerRequest('/api/rotate-client', 'POST', {
            name: clientName
        });
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}

async function getCurrentProxy(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };

        const response = await makeProxyServerRequest(`/current`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}

async function getMyIP(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };

        const response = await makeProxyServerRequest(`/myip`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`);
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
async function syncAllClientsToServer(adminId = null) {
    const results = {
        success: 0,
        failed: 0,
        errors: []
    };

    const clientsToSync = adminId ? { [adminId]: getAdminClients(adminId) } : clients;

    for (const [aId, adminClients] of Object.entries(clientsToSync)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            try {
                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} (Admin: ${aId})`);
                
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: clientData.password,
                    proxies: clientData.proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                results.success++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:`, error.message);
                results.failed++;
                results.errors.push(`${clientName}: ${error.message}`);
            }
        }
    }

    return results;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthorized(userId) {
    return userId === SUPER_ADMIN_ID || admins.includes(userId);
}

function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getKeyboardForUser(userId) {
    return isSuperAdmin(userId) ? superAdminKeyboard : adminKeyboard;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    const username = msg.from.username || 'Unknown';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthorized(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdmin = isSuperAdmin(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    if (text === '/start') {
        const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!

üë§ –í–∞—à–∞ —Ä–æ–ª—å: ${superAdmin ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)' : '–ê–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)'}

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏!

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è ${PROXY6_CONFIG.DEFAULT_COUNT} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PROXY6_CONFIG.DEFAULT_PERIOD} –¥–Ω–µ–π —á–µ—Ä–µ–∑ PROXY6.net

üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`;

        await bot.sendMessage(chatId, welcomeMessage, getKeyboardForUser(userId));
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
    if (text === 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' || text === '/addclientwithproxies') {
        console.log(`üì• –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);
        userStates[userId] = { action: 'adding_client_with_proxies' };
        await bot.sendMessage(chatId, `üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`client1 mypassword123\`
\`31.129.21.214:9379:gNzocE:fnKaHc\`
\`45.91.65.201:9524:gNzocE:fnKaHc\`
\`45.91.65.235:9071:gNzocE:fnKaHc\`

–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å
–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass

‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –ù–ï –±—É–¥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    if (text === 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' || text === '/sync') {
        console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç userId=${userId}`);
        
        await bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

        try {
            const results = await syncAllClientsToServer(superAdmin ? null : userId);
            
            let message = `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}
‚ùå –û—à–∏–±–æ–∫: ${results.failed}`;

            if (results.errors.length > 0) {
                message += `\n\n‚ùå –û—à–∏–±–∫–∏:\n${results.errors.slice(0, 5).join('\n')}`;
                if (results.errors.length > 5) {
                    message += `\n... –∏ –µ—â–µ ${results.errors.length - 5} –æ—à–∏–±–æ–∫`;
                }
            }

            await bot.sendMessage(chatId, message);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
        return;
    }

    if (text === 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/addclient') {
        console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);
        userStates[userId] = { action: 'adding_client' };
        await bot.sendMessage(chatId, `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`user123 pass456\`

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–æ ${PROXY6_CONFIG.DEFAULT_COUNT} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PROXY6_CONFIG.DEFAULT_PERIOD} –¥–Ω–µ–π
üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/deleteclient') {
        console.log(`üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üóëÔ∏è ${displayName}`,
                        callback_data: `delete_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboard);
        return;
    }

    if (text === 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' || text === 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' || text === '/clients') {
        console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ /clients –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç');
            return;
        }

        let message = `üìã –°–ø–∏—Å–æ–∫ ${superAdmin ? '–≤—Å–µ—Ö' : '–≤–∞—à–∏—Ö'} –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n`;
        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ?
                `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;

            message += `üë§ ${displayName}\n`;
            message += `   üîê –ü–∞—Ä–æ–ª—å: ${client.password}\n`;
            message += `   üåê –ü—Ä–æ–∫—Å–∏: ${proxyCount} —à—Ç.\n\n`;
        }

        await bot.sendMessage(chatId, message);
        return;
    }

    if (text === 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6' || text === '/proxy6-balance') {
        console.log(`üí∞ –ö–æ–º–∞–Ω–¥–∞ /proxy6-balance –æ—Ç userId=${userId}`);

        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const balanceResult = await checkProxy6Balance();

        if (balanceResult.success) {
            const message = `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6.net:
üíµ ${balanceResult.balance} ${balanceResult.currency}
üë§ ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${balanceResult.user_id}`;
            await bot.sendMessage(chatId, message);
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResult.error}`);
        }
        return;
    }

    if (text === 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏' || text === '/buy-proxies') {
        console.log(`üõí –ö–æ–º–∞–Ω–¥–∞ /buy-proxies –æ—Ç userId=${userId}`);

        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    const proxyCount = client.proxies ? client.proxies.length : 0;

                    return [{
                        text: `${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)`,
                        callback_data: `buy_proxy_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' || text === '/add-proxy') {
        console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        userStates[userId] = { action: 'adding_proxy' };

        let message = `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host:port:user:pass\`

–ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host1:port1:user1:pass1\`
\`host2:port2:user2:pass2\`

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;

        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ?
                `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `‚Ä¢ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)\n`;
        }

        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    if (text === '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏' || text === '/remove-proxy') {
        console.log(`‚ûñ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    const proxyCount = client.proxies ? client.proxies.length : 0;

                    return [{
                        text: `‚ûñ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)`,
                        callback_data: `remove_proxy_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏' || text === '/rotate') {
        console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ /rotate –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üîÑ ${displayName}`,
                        callback_data: `rotate_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' || text === '/current-proxy') {
        console.log(`üåê –ö–æ–º–∞–Ω–¥–∞ /current-proxy –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üåê ${displayName}`,
                        callback_data: `current_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === 'üåç –ú–æ–π IP' || text === '/myip') {
        console.log(`üåç –ö–æ–º–∞–Ω–¥–∞ /myip –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);

        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ?
                        `${client.originalName} (Admin: ${client.adminId})` : name;

                    return [{
                        text: `üåç ${displayName}`,
                        callback_data: `myip_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:', keyboard);
        return;
    }

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (text === 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' || text === '/manageadmins') {
        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }

        const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
        const message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

üìã –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: ${adminsList}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚Ä¢ \`+123456789\` - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`-123456789\` - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`list\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤`;

        userStates[userId] = { action: 'managing_admins' };
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫' || text === '/restart') {
        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }

        await bot.sendMessage(chatId, 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        process.exit(0);
    }

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const buttonCommands = [
        'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏', '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
        'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã', 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏', 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6',
        'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏', 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏', 'üåç –ú–æ–π IP', 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 
        'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'
    ];

    if (buttonCommands.includes(text)) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if (userStates[userId]) {
            delete userStates[userId];
            console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: ${text}`);
        }
        await bot.sendMessage(chatId, `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.`, getKeyboardForUser(userId));
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userStates[userId]) {
        const state = userStates[userId];

        // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        if (state.action === 'adding_client_with_proxies') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏');

            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ: –ø—Ä–æ–∫—Å–∏');
                return;
            }

            const firstLine = lines[0].trim().split(/\s+/);
            if (firstLine.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }

            const clientName = firstLine[0];
            const password = firstLine[1];
            const proxyLines = lines.slice(1);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
            const proxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) {
                        proxies.push(proxy);
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }

            if (proxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
            adminClients[clientName] = {
                password: password,
                proxies: proxies
            };

            saveClients();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
                const serverResponse = await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: password,
                    proxies: proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);

                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}
   
üì• –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –ø–æ–∫—É–ø–∫–∏`, getKeyboardForUser(userId));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`, getKeyboardForUser(userId));
            }

            delete userStates[userId];
            return;
        }

        if (state.action === 'adding_client') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');

            const lines = text.trim().split('\n');
            const parts = lines[0].trim().split(/\s+/);

            if (parts.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }

            const clientName = parts[0];
            const password = parts[1];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            adminClients[clientName] = {
                password: password,
                proxies: []
            };

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net
            let proxyPurchaseMessage = '';
            if (PROXY6_CONFIG.API_KEY) {
                console.log(`üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}`);

                try {
                    const purchaseResult = await buyProxy6Proxies(
                        PROXY6_CONFIG.DEFAULT_COUNT,
                        PROXY6_CONFIG.DEFAULT_PERIOD,
                        PROXY6_CONFIG.DEFAULT_COUNTRY,
                        PROXY6_CONFIG.DEFAULT_VERSION,
                        `client_${clientName}_admin_${userId}`
                    );

                    if (purchaseResult.success) {
                        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã:`, purchaseResult);

                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        const proxies = [];
                        for (const [id, proxy] of Object.entries(purchaseResult.proxies)) {
                            proxies.push(`${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`);
                        }

                        adminClients[clientName].proxies = proxies;
                        proxyPurchaseMessage = `\nüõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–æ ${purchaseResult.count} –ø—Ä–æ–∫—Å–∏ –∑–∞ ${purchaseResult.price} RUB`;

                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
                    } else {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${purchaseResult.error}`);
                        proxyPurchaseMessage = `\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net: ${purchaseResult.error}`;
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏:', error);
                    proxyPurchaseMessage = `\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${error.message}`;
                }
            } else {
                console.log(`‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É`);
                proxyPurchaseMessage = '\n‚ö†Ô∏è API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
            }

            saveClients();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
                const serverResponse = await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: clientName,
                    password: password,
                    proxies: adminClients[clientName].proxies.map(formatProxyForRailway)
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);

                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${adminClients[clientName].proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}${proxyPurchaseMessage}`, getKeyboardForUser(userId));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${adminClients[clientName].proxies.length} –ø—Ä–æ–∫—Å–∏${proxyPurchaseMessage}
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`, getKeyboardForUser(userId));
            }

            delete userStates[userId];
            return;
        }

        if (state.action === 'adding_proxy') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏');

            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\nhost:port:user:pass');
                return;
            }

            const clientName = lines[0].trim();
            const proxyLines = lines.slice(1);

            // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
            const clientInfo = superAdmin ?
                findClientByName(clientName) :
                findClientByName(clientName, userId);

            if (!clientInfo) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if (!superAdmin && clientInfo.adminId != userId) {
                await bot.sendMessage(chatId, `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
                delete userStates[userId];
                return;
            }

            // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
            const newProxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) {
                        newProxies.push(proxy);
                    } else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }

            if (newProxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
            const adminClients = getAdminClients(clientInfo.adminId);
            adminClients[clientInfo.clientName].proxies.push(...newProxies);
            saveClients();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            try {
                await makeProxyServerRequest('/api/add-proxy', 'POST', {
                    name: clientInfo.clientName,
                    proxies: newProxies.map(formatProxyForRailway)
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            }

            await bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newProxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}
üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${adminClients[clientInfo.clientName].proxies.length}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${clientInfo.adminId}`, getKeyboardForUser(userId));

            delete userStates[userId];
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        if (state.action === 'managing_admins' && superAdmin) {
            if (text === 'list') {
                const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
                await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${adminsList}`);
                return;
            }

            if (text.startsWith('+')) {
                const newAdminId = parseInt(text.substring(1));
                if (isNaN(newAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }

                if (admins.includes(newAdminId)) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }

                admins.push(newAdminId);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã`);
                return;
            }

            if (text.startsWith('-')) {
                const removeAdminId = parseInt(text.substring(1));
                if (isNaN(removeAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }

                const index = admins.indexOf(removeAdminId);
                if (index === -1) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }

                admins.splice(index, 1);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤`);
                return;
            }

            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +ID, -ID –∏–ª–∏ list');
            return;
        }
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', getKeyboardForUser(userId));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`üîò Callback: ${data} –æ—Ç userId=${userId}`);

    if (!isAuthorized(userId)) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
        return;
    }

    const superAdmin = isSuperAdmin(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith('delete_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
        try {
            const deleteResult = await deleteClientFromServer(clientName);
            if (deleteResult.success) {
                console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', deleteResult.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        delete adminClients[clientName];
        saveClients();

        await bot.editMessageText(
            `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('buy_proxy_')) {
        const parts = data.split('_');
        const clientName = parts[2];
        const adminId = parts[3];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const purchaseResult = await buyProxy6Proxies(
                PROXY6_CONFIG.DEFAULT_COUNT,
                PROXY6_CONFIG.DEFAULT_PERIOD,
                PROXY6_CONFIG.DEFAULT_COUNTRY,
                PROXY6_CONFIG.DEFAULT_VERSION,
                `client_${clientName}_admin_${adminId}_manual`
            );

            if (purchaseResult.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                const newProxies = [];
                for (const [id, proxy] of Object.entries(purchaseResult.proxies)) {
                    newProxies.push(`${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`);
                }

                adminClients[clientName].proxies.push(...newProxies);
                saveClients();

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                try {
                    await makeProxyServerRequest('/api/add-proxy', 'POST', {
                        name: clientName,
                        proxies: newProxies.map(formatProxyForRailway)
                    });
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
                }

                await bot.editMessageText(
                    `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${purchaseResult.count} –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchaseResult.price} RUB
üì¶ –ó–∞–∫–∞–∑: #${purchaseResult.order_id}
üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${adminClients[clientName].proxies.length}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );
            } else {
                await bot.editMessageText(
                    `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}`,
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );
            }
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('remove_proxy_')) {
        const parts = data.split('_');
        const clientName = parts[2];
        const adminId = parts[3];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getCurrentProxy(clientName, adminClients[clientName].password);

            await bot.editMessageText(
                `üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.proxy || '–ù–µ –Ω–∞–π–¥–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
    if (data.startsWith('myip_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getMyIP(clientName, adminClients[clientName].password);

            await bot.editMessageText(
                `üåç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.ip || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadClients();
loadAdmins();

console.log('üöÄ Telegram Bot –∑–∞–ø—É—â–µ–Ω!');
console.log(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID: ${SUPER_ADMIN_ID}`);
console.log(`üë• –ê–¥–º–∏–Ω–æ–≤: ${admins.length}`);
console.log(`üõí PROXY6.net API: ${PROXY6_CONFIG.API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${PROXY_SERVER_URL}`);

// –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π health endpoint (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞)
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
    const totalClients = Object.values(clients).reduce((sum, adminClients) => sum + Object.keys(adminClients).length, 0);

    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        total_clients: totalClients,
        admins_count: admins.length,
        proxy6_configured: !!PROXY6_CONFIG.API_KEY,
        proxy_server: PROXY_SERVER_URL,
        clients_by_admin: Object.fromEntries(
            Object.entries(clients).map(([adminId, adminClients]) => [
                adminId, Object.keys(adminClients).length
            ])
        )
    });
});

app.listen(PORT, () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function formatProxyForRailway(proxy) {
    // PROXY6.net –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { host, port, user, pass, type }
    // –°–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç: "http://user:pass@host:port"

    if (typeof proxy === 'string') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ http://user:pass@host:port
        if (proxy.startsWith('http://') && proxy.includes('@')) {
            return proxy;
        }

        // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        const parts = proxy.split(':');
        if (parts.length === 4) {
            const [host, port, user, pass] = parts;
            return `http://${encodeURIComponent(user)}:${encodeURIComponent(pass)}@${host}:${port}`;
        }

        return proxy; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }

    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç PROXY6.net
    if (proxy && proxy.host && proxy.port && proxy.user && proxy.pass) {
        return `http://${encodeURIComponent(proxy.user)}:${encodeURIComponent(proxy.pass)}@${proxy.host}:${proxy.port}`;
    }

    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:', proxy);
    return null;
}
