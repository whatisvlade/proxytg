const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// ---------- –õ–û–ì–ì–ï–† ----------
const LOG_LEVEL = (process.env.LOG_LEVEL || 'info').toLowerCase(); // error|warn|info|debug
const levels = { error: 0, warn: 1, info: 2, debug: 3 };
const canLog = (lvl) => (levels[lvl] ?? 2) <= (levels[LOG_LEVEL] ?? 2);
const log = {
  error: (...a) => canLog('error') && console.error(...a),
  warn:  (...a) => canLog('warn')  && console.warn(...a),
  info:  (...a) => canLog('info')  && console.log(...a),
  debug: (...a) => canLog('debug') && console.log(...a),
};
const MAX_BODY_LOG = parseInt(process.env.MAX_BODY_LOG || '500', 10); // 0 ‚Äî –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–∞
const safeJson = (obj) => {
  try {
    const s = JSON.stringify(obj);
    if (MAX_BODY_LOG <= 0) return '[hidden]';
    if (s.length > MAX_BODY_LOG) return s.slice(0, MAX_BODY_LOG) + '‚Ä¶(truncated)';
    return s;
  } catch { return '[unserializable]'; }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PROXY6
const PROXY6_CONFIG = {
    API_KEY: process.env.PROXY6_API_KEY,
    BASE_URL: 'https://proxy6.net/api'
};

// –ï–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20 —à—Ç—É–∫ –Ω–∞ 7 –¥–Ω–µ–π, RU, IPv4 shared)
const PURCHASE_DEFAULTS = {
    count: parseInt(process.env.PROXY_BUY_COUNT || '20', 10),
    period: parseInt(process.env.PROXY_BUY_PERIOD || '14', 10),
    country: process.env.PROXY_BUY_COUNTRY || 'ru',
    version: parseInt(process.env.PROXY_BUY_VERSION || '3', 10)
};

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const CLIENTS_FILE = path.join(__dirname, 'clients.json');
const ADMINS_FILE = path.join(__dirname, 'admins.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
let clients = {}; // { adminId: { clientName: { password, proxies, proxy6_order_id, proxy_expires_at } } }
let admins = [];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' }
            ],
            [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåç –ú–æ–π IP' },
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' } // NEW
            ],
            [
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
const superAdminKeyboard = {
    reply_markup: {
        keyboard: [
            [
                { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' }
            ],
            [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' },
                { text: 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' },
                { text: 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üåç –ú–æ–π IP' },
                { text: 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' }
            ],
            [
                { text: 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' } // NEW
            ],
            [
                { text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' },
                { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' }
            ],
            [
                { text: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞' }
            ]
        ],
        resize_keyboard: true,
        persistent: true
    }
};

// ===== PROXY6 API =====
async function checkProxy6Balance() {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return { success: false, error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
        }
        const response = await axios.get(`${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}`, { timeout: 10000 });
        if (response.data.status === 'yes') {
            return {
                success: true,
                balance: response.data.balance,
                currency: response.data.currency,
                user_id: response.data.user_id
            };
        } else {
            return { success: false, error: response.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
        }
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ PROXY6:', error.message);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6' };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ –∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ)
async function getProxy6Price(count = PURCHASE_DEFAULTS.count, period = PURCHASE_DEFAULTS.period, version = PURCHASE_DEFAULTS.version) {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return { success: false, error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
        }
        const url = `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/getprice?count=${count}&period=${period}&version=${version}`;
        const response = await axios.get(url, { timeout: 10000 });
        if (response.data.status === 'yes') {
            return {
                success: true,
                price: response.data.price,
                price_single: response.data.price_single,
                period: response.data.period,
                count: response.data.count,
                balance: response.data.balance,
                currency: response.data.currency
            };
        } else {
            return { success: false, error: response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã' };
        }
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã PROXY6:', error.message);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6' };
    }
}

// –ü–æ–∫—É–ø–∫–∞
async function buyProxy6(count = PURCHASE_DEFAULTS.count, period = PURCHASE_DEFAULTS.period, country = PURCHASE_DEFAULTS.country, version = PURCHASE_DEFAULTS.version, descr = '') {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            return { success: false, error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
        }
        const url = `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/buy?count=${count}&period=${period}&country=${country}&version=${version}&descr=${encodeURIComponent(descr)}`;
        const response = await axios.get(url, { timeout: 15000 });
        if (response.data.status === 'yes') {
            return {
                success: true,
                order_id: response.data.order_id,
                count: response.data.count,
                price: response.data.price,
                period: response.data.period,
                country: response.data.country,
                balance: response.data.balance,
                currency: response.data.currency,
                proxies: response.data.list
            };
        } else {
            return {
                success: false,
                error: response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏',
                error_id: response.data.error_id
            };
        }
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏ PROXY6:', error.message);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PROXY6' };
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏
function formatProxiesFromProxy6(proxies) {
    const formatted = [];
    for (const proxyId in proxies) {
        const p = proxies[proxyId];
        formatted.push(`${p.host}:${p.port}:${p.user}:${p.pass}`); // host:port:user:pass
    }
    return formatted;
}

// ===== CORE =====
function loadClients() {
    try {
        if (fs.existsSync(CLIENTS_FILE)) {
            const data = fs.readFileSync(CLIENTS_FILE, 'utf8');
            clients = JSON.parse(data);
        }
    } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
        clients = {};
    }
}
function saveClients() {
    try {
        fs.writeFileSync(CLIENTS_FILE, JSON.stringify(clients, null, 2));
        log.debug('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
    }
}
function loadAdmins() {
    try {
        if (fs.existsSync(ADMINS_FILE)) {
            const data = fs.readFileSync(ADMINS_FILE, 'utf8');
            admins = JSON.parse(data);
        }
    } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤:', error.message);
        admins = [];
    }
}
function saveAdmins() {
    try {
        fs.writeFileSync(ADMINS_FILE, JSON.stringify(admins, null, 2));
        log.debug('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error.message);
    }
}
function getAdminClients(adminId) {
    if (!clients[adminId]) clients[adminId] = {};
    return clients[adminId];
}
function getAllClients() {
    const all = {};
    for (const [adminId, adminClients] of Object.entries(clients)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            all[`${clientName}_${adminId}`] = {
                ...clientData,
                adminId,
                originalName: clientName
            };
        }
    }
    return all;
}
function findClientByName(clientName, adminId = null) {
    if (adminId) {
        const adminClients = getAdminClients(adminId);
        if (adminClients[clientName]) {
            return { client: adminClients[clientName], adminId, clientName };
        }
    } else {
        for (const [aId, adminClients] of Object.entries(clients)) {
            if (adminClients[clientName]) {
                return { client: adminClients[clientName], adminId: aId, clientName };
            }
        }
    }
    return null;
}

// –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
async function makeProxyServerRequest(endpoint, method = 'GET', data = null, auth = null) {
    try {
        const config = {
            method,
            url: `${PROXY_SERVER_URL}${endpoint}`,
            timeout: 10000,
            headers: { 'Content-Type': 'application/json' }
        };
        if (auth) config.auth = auth;
        if (data && method !== 'GET') config.data = data;

        log.debug(`HTTP ${method} ${config.url}`);
        if (data) log.debug('HTTP body:', safeJson(data));

        const response = await axios(config);
        return response.data;
    } catch (error) {
        const status = error?.response?.status;
        const body = error?.response?.data;
        log.warn(`HTTP ${method} ${PROXY_SERVER_URL}${endpoint} failed: ${status || error.message}`);
        if (status) log.debug('HTTP error body:', safeJson(body));
        throw error;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ –æ–¥–Ω–æ–º—É: { clientName, proxy }
async function addProxiesToServer(clientName, proxies) {
    let ok = 0, fail = 0, errors = [];
    for (const proxy of proxies) {
        try {
            await makeProxyServerRequest('/api/add-proxy', 'POST', { clientName, proxy });
            ok++;
        } catch (e) {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –¥–æ—Å—Ç—É–ø–µ–Ω
            try {
                await makeProxyServerRequest('/api/add-proxy', 'POST', { name: clientName, proxies: [proxy] });
                ok++;
            } catch (e2) {
                fail++;
                const msg = e2?.response?.data ? safeJson(e2.response.data) : e2.message;
                log.warn(`add-proxy failed for ${clientName}: ${msg}`);
                errors.push(msg);
            }
        }
    }
    log.info(`addProxiesToServer(${clientName}): added=${ok}, failed=${fail}`);
    return { ok, fail, errors };
}

async function deleteClientFromServer(clientName) {
    try {
        log.debug(`HTTP DELETE ${PROXY_SERVER_URL}/api/delete-client/${clientName}`);
        const response = await axios.delete(`${PROXY_SERVER_URL}/api/delete-client/${clientName}`, {
            timeout: 10000,
            headers: { 'Accept': 'application/json' }
        });
        log.info(`–ö–ª–∏–µ–Ω—Ç ${clientName} —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        return { success: true, data: response.data };
    } catch (error) {
        if (error.response && error.response.status === 404) {
            log.info(`–ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
            return { success: true, data: { message: 'Client not found on server' } };
        }
        log.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        return { success: false, error: error.message };
    }
}
async function getCurrentProxy(clientName, password) {
    try {
        return await makeProxyServerRequest(`/current`, 'GET', null, { username: clientName, password });
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}
async function getMyIP(clientName, password) {
    try {
        return await makeProxyServerRequest(`/myip`, 'GET', null, { username: clientName, password });
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–æ: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ 409 –∏ –¥–æ—Å—ã–ª–∫–∞ –ø—Ä–æ–∫—Å–∏
async function syncAllClientsToServer(adminId = null) {
    const results = { success: 0, failed: 0, errors: [] };
    const toSync = adminId ? { [adminId]: getAdminClients(adminId) } : clients;

    for (const [aId, adminClients] of Object.entries(toSync)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            try {
                log.debug(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} (Admin: ${aId})`);
                try {
                    await makeProxyServerRequest('/api/add-client', 'POST', {
                        clientName,
                        password: clientData.password,
                        proxies: (clientData.proxies || []).map(formatProxyForRailway).filter(Boolean)
                    });
                    log.debug(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ add-client`);
                    results.success++;
                } catch (err) {
                    const status = err?.response?.status;
                    if (status === 409) {
                        log.debug(`‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (409). –î–æ—Å—ã–ª–∞—é –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ add-proxy...`);
                        try {
                            const proxies = (clientData.proxies || []).map(formatProxyForRailway).filter(Boolean);
                            if (proxies.length > 0) {
                                const res = await addProxiesToServer(clientName, proxies);
                                log.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ${clientName} —á–µ—Ä–µ–∑ add-proxy: added=${res.ok}, failed=${res.fail}`);
                            }
                            results.success++;
                        } catch (addProxyErr) {
                            log.error(`‚ùå –û—à–∏–±–∫–∞ add-proxy –¥–ª—è ${clientName}:`, addProxyErr.message);
                            results.failed++;
                            results.errors.push(`${clientName}: add-proxy failed: ${addProxyErr.message}`);
                        }
                    } else {
                        throw err;
                    }
                }
            } catch (error) {
                log.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:`, error.message);
                results.failed++;
                results.errors.push(`${clientName}: ${error.message}`);
            }
        }
    }
    return results;
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
function isAuthorized(userId) {
    return userId === SUPER_ADMIN_ID || admins.includes(userId);
}
function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}
function getKeyboardForUser(userId) {
    return isSuperAdmin(userId) ? superAdminKeyboard : adminKeyboard;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è
const userStates = {};

// ===== –õ–û–ì–ò–ö–ê –ü–û–ö–£–ü–ö–ò –ü–†–û–ö–°–ò =====
async function handleAddUserWithPurchase(chatId, userId) {
    try {
        if (!isAuthorized(userId)) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.');
            return;
        }
        const balanceCheck = await checkProxy6Balance();
        if (!balanceCheck.success) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PROXY6: ${balanceCheck.error}`);
            return;
        }

        const priceCheck = await getProxy6Price(PURCHASE_DEFAULTS.count, PURCHASE_DEFAULTS.period, PURCHASE_DEFAULTS.version);
        if (!priceCheck.success) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: ${priceCheck.error}`);
            return;
        }

        if (parseFloat(balanceCheck.balance) < priceCheck.price) {
            await bot.sendMessage(
                chatId,
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ PROXY6!\n\n` +
                `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
                `üí∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${priceCheck.price} ${priceCheck.currency}\n` +
                `üìä –¶–µ–Ω–∞ –∑–∞ ${PURCHASE_DEFAULTS.count} shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PURCHASE_DEFAULTS.period} –¥–Ω–µ–π`
            );
            return;
        }

        userStates[userId] = {
            action: 'add_user_with_purchase',
            adminId: userId,
            step: 'waiting_username',
            count: PURCHASE_DEFAULTS.count,
            period: PURCHASE_DEFAULTS.period,
            country: PURCHASE_DEFAULTS.country,
            version: PURCHASE_DEFAULTS.version
        };

        await bot.sendMessage(
            chatId,
            `‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏!\n\n` +
            `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
            `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${priceCheck.price} ${priceCheck.currency}\n` +
            `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${PURCHASE_DEFAULTS.count} shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PURCHASE_DEFAULTS.period} –¥–Ω–µ–π\n\n` +
            `üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:`
        );

    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –≤ handleAddUserWithPurchase:', error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏.');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ–∫—É–ø–∫–∞
async function createUserWithProxyPurchase(userData) {
    try {
        const count = userData.count ?? PURCHASE_DEFAULTS.count;
        const period = userData.period ?? PURCHASE_DEFAULTS.period;
        const country = userData.country ?? PURCHASE_DEFAULTS.country;
        const version = userData.version ?? PURCHASE_DEFAULTS.version;

        const purchaseResult = await buyProxy6(count, period, country, version, `user_${userData.username}`);
        if (!purchaseResult.success) {
            return { success: false, error: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}` };
        }

        const formattedProxies = formatProxiesFromProxy6(purchaseResult.proxies);
        const adminClients = getAdminClients(userData.adminId);
        adminClients[userData.username] = {
            password: userData.password,
            proxies: formattedProxies,
            proxy6_order_id: purchaseResult.order_id,
            proxy6_descr: `user_${userData.username}`,
            created_at: new Date().toISOString(),
            proxy_expires_at: new Date(Date.now() + (period * 24 * 60 * 60 * 1000)).toISOString()
        };
        saveClients();

        const partialNote = formattedProxies.length < count
            ? `\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–∫–∞–∑–∞–Ω–æ ${count}, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${formattedProxies.length}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –Ω–∞ PROXY6.`
            : '';

        return {
            success: true,
            user: adminClients[userData.username],
            username: userData.username,
            purchase_info: {
                order_id: purchaseResult.order_id,
                price: purchaseResult.price,
                count: purchaseResult.count,
                period: purchaseResult.period,
                balance_remaining: purchaseResult.balance,
                currency: purchaseResult.currency
            },
            partialNote
        };
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–∫—Å–∏:', error.message);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function buyProxiesForExistingClient({ adminId, clientName, count = PURCHASE_DEFAULTS.count, period = PURCHASE_DEFAULTS.period, country = PURCHASE_DEFAULTS.country, version = PURCHASE_DEFAULTS.version }) {
    try {
        if (!PROXY6_CONFIG.API_KEY) return { success: false, error: 'API –∫–ª—é—á PROXY6 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };

        const purchaseResult = await buyProxy6(count, period, country, version, `user_${clientName}`);
        if (!purchaseResult.success) {
            return { success: false, error: `–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}` };
        }

        const formattedProxies = formatProxiesFromProxy6(purchaseResult.proxies);
        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            return { success: false, error: `–ö–ª–∏–µ–Ω—Ç ${clientName} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
        }

        if (!Array.isArray(adminClients[clientName].proxies)) adminClients[clientName].proxies = [];
        adminClients[clientName].proxies.push(...formattedProxies);
        adminClients[clientName].proxy6_order_id = purchaseResult.order_id;
        adminClients[clientName].proxy6_descr = `user_${clientName}`;
        adminClients[clientName].proxy_expires_at = new Date(Date.now() + (period * 24 * 60 * 60 * 1000)).toISOString();
        saveClients();

        try {
            const mapped = formattedProxies.map(formatProxyForRailway).filter(Boolean);
            const res = await addProxiesToServer(clientName, mapped);
            log.info(`add-proxy summary for ${clientName}: added=${res.ok}, failed=${res.fail}`);
        } catch (err) {
            log.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', err.message);
        }

        const partialNote = formattedProxies.length < count
            ? `\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–∫–∞–∑–∞–Ω–æ ${count}, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${formattedProxies.length}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –Ω–∞ PROXY6.`
            : '';

        return {
            success: true,
            clientName,
            adminId,
            addedCount: formattedProxies.length,
            partialNote,
            purchase_info: {
                order_id: purchaseResult.order_id,
                price: purchaseResult.price,
                count: purchaseResult.count,
                period: purchaseResult.period,
                balance_remaining: purchaseResult.balance,
                currency: purchaseResult.currency
            }
        };
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –≤ buyProxiesForExistingClient:', error.message);
        return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏' };
    }
}

async function handleConfirmPurchase(chatId, userId) {
    const userState = userStates[userId];
    if (!userState || userState.action !== 'add_user_with_purchase') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }
    try {
        await bot.sendMessage(chatId, '‚è≥ –ü–æ–∫—É–ø–∞—é –ø—Ä–æ–∫—Å–∏ –∏ —Å–æ–∑–¥–∞—é –∫–ª–∏–µ–Ω—Ç–∞...');

        const result = await createUserWithProxyPurchase({
            username: userState.username,
            password: userState.password,
            adminId: userState.adminId,
            count: userState.count,
            period: userState.period,
            country: userState.country,
            version: userState.version
        });

        if (result.success) {
            const purchaseInfo = result.purchase_info;
            const proxiesText = result.user.proxies.map((proxy, i) => `${i + 1}. ${proxy}`).join('\n');

            try {
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName: result.username,
                    password: result.user.password,
                    proxies: result.user.proxies.map(formatProxyForRailway).filter(Boolean)
                });
                log.info(`–ö–ª–∏–µ–Ω—Ç ${result.username} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);
            } catch (error) {
                log.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error.message);
            }

            await bot.sendMessage(
                chatId,
                `‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∫—Å–∏ –∫—É–ø–ª–µ–Ω—ã!\n\n` +
                `üë§ –õ–æ–≥–∏–Ω: ${result.username}\n` +
                `üîê –ü–∞—Ä–æ–ª—å: ${result.user.password}\n\n` +
                (proxiesText ? `üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:\n${proxiesText}\n\n` : '') +
                (result.partialNote || '') + '\n' +
                `üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ:\n` +
                `üÜî –ó–∞–∫–∞–∑: ${purchaseInfo.order_id}\n` +
                `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchaseInfo.price} ${purchaseInfo.currency || 'RUB'}\n` +
                `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${purchaseInfo.count} –ø—Ä–æ–∫—Å–∏\n` +
                `‚è∞ –ü–µ—Ä–∏–æ–¥: ${purchaseInfo.period} –¥–Ω–µ–π\n` +
                `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${purchaseInfo.balance_remaining} ${purchaseInfo.currency || 'RUB'}`,
                getKeyboardForUser(userId)
            );
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.error}`, getKeyboardForUser(userId));
        }
    } catch (error) {
        log.error('–û—à–∏–±–∫–∞ –≤ handleConfirmPurchase:', error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.', getKeyboardForUser(userId));
    } finally {
        delete userStates[userId];
    }
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (!isAuthorized(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
        return;
    }

    const superAdmin = isSuperAdmin(userId);

    if (text === '/start') {
        const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!

üë§ –í–∞—à–∞ —Ä–æ–ª—å: ${superAdmin ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)' : '–ê–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)'}

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏!

üÜï –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏
‚Ä¢ üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - –±–∞–ª–∞–Ω—Å PROXY6 (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)`;
        await bot.sendMessage(chatId, welcomeMessage, getKeyboardForUser(userId));
        return;
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–∫—É–ø–∫–æ–π
    if (text === 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π' || text === '/addclientwithpurchase') {
        log.debug(`üõí –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–∫—É–ø–∫–æ–π –æ—Ç userId=${userId}`);
        await handleAddUserWithPurchase(chatId, userId);
        return;
    }

    // –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
    if (text === 'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É' || text === '/buy-proxy') {
        log.debug(`üõç –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏');
            return;
        }

        userStates[userId] = {
            action: 'buying_proxy',
            step: 'waiting_client_name',
            count: PURCHASE_DEFAULTS.count,
            period: PURCHASE_DEFAULTS.period,
            country: PURCHASE_DEFAULTS.country,
            version: PURCHASE_DEFAULTS.version
        };

        let message = `üõç –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å ${PURCHASE_DEFAULTS.count} shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PURCHASE_DEFAULTS.period} –¥–Ω–µ–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;

        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName
                ? `${client.originalName} (Admin: ${client.adminId})`
                : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `‚Ä¢ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)\n`;
        }

        await bot.sendMessage(chatId, message);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if (text === 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞' || text === '/proxy6-balance') {
        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }
        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å PROXY6...');
        const balanceResult = await checkProxy6Balance();

        if (balanceResult.success) {
            const priceResult = await getProxy6Price(PURCHASE_DEFAULTS.count, PURCHASE_DEFAULTS.period, PURCHASE_DEFAULTS.version);
            let message = `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6:\n\n` +
                         `üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceResult.balance} ${balanceResult.currency}\n` +
                         `üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${balanceResult.user_id}\n`;
            if (priceResult.success) {
                const canBuy = Math.floor(parseFloat(balanceResult.balance) / priceResult.price);
                message += `\nüìä –°—Ç–æ–∏–º–æ—Å—Ç—å ${PURCHASE_DEFAULTS.count} shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PURCHASE_DEFAULTS.period} –¥–Ω–µ–π: ${priceResult.price} ${balanceResult.currency}\n` +
                           `üõí –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${canBuy} —Ç–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤`;
            }
            await bot.sendMessage(chatId, message);
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${balanceResult.error}`);
        }
        return;
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
    if (text === 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏' || text === '/addclientwithproxies') {
        userStates[userId] = { action: 'adding_client_with_proxies' };
        await bot.sendMessage(chatId, `üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`client1 mypassword123\`
\`31.129.21.214:9379:gNzocE:fnKaHc\`
\`45.91.65.201:9524:gNzocE:fnKaHc\`
\`45.91.65.235:9071:gNzocE:fnKaHc\`

–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å
–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass

‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –ù–ï –±—É–¥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    if (text === 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' || text === '/sync') {
        await bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
        try {
            const results = await syncAllClientsToServer(superAdmin ? null : userId);
            log.info(`Sync finished: ok=${results.success} fail=${results.failed}`);

            let message = `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}
‚ùå –û—à–∏–±–æ–∫: ${results.failed}`;
            if (results.errors.length > 0) {
                message += `\n\n‚ùå –û—à–∏–±–∫–∏:\n${results.errors.slice(0, 5).join('\n')}`;
                if (results.errors.length > 5) {
                    message += `\n... –∏ –µ—â–µ ${results.errors.length - 5} –æ—à–∏–±–æ–∫`;
                }
            }
            await bot.sendMessage(chatId, message);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
        return;
    }

    if (text === 'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/addclient') {
        userStates[userId] = { action: 'adding_client' };
        await bot.sendMessage(chatId, `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`user123 pass456\`

üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' || text === '/deleteclient') {
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }
        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName
                        ? `${client.originalName} (Admin: ${client.adminId})` : name;
                    return [{
                        text: `üóëÔ∏è ${displayName}`,
                        callback_data: `delete_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };
        await bot.sendMessage(chatId, 'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboard);
        return;
    }

    if (text === 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã' || text === 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' || text === '/clients') {
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç');
            return;
        }
        let message = `üìã –°–ø–∏—Å–æ–∫ ${superAdmin ? '–≤—Å–µ—Ö' : '–≤–∞—à–∏—Ö'} –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n`;
        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ? `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `üë§ ${displayName}\n`;
            message += `   üîê –ü–∞—Ä–æ–ª—å: ${client.password}\n`;
            message += `   üåê –ü—Ä–æ–∫—Å–∏: ${proxyCount} —à—Ç.\n`;
            if (client.proxy6_order_id) message += `   üÜî –ó–∞–∫–∞–∑ PROXY6: ${client.proxy6_order_id}\n`;
            if (client.proxy_expires_at) {
                const expiresAt = new Date(client.proxy_expires_at);
                message += `   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt.toLocaleDateString('ru-RU')}\n`;
            }
            message += `\n`;
        }
        await bot.sendMessage(chatId, message);
        return;
    }

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏' || text === '/add-proxy') {
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }
        userStates[userId] = { action: 'adding_proxy' };
        let message = `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host:port:user:pass\`

–ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏:
\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\`
\`host1:port1:user1:pass1\`
\`host2:port2:user2:pass2\`

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;
        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ? `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            message += `‚Ä¢ ${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)\n`;
        }
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏' || text === '/current-proxy') {
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }
        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? `${client.originalName} (Admin: ${client.adminId})` : name;
                    return [{
                        text: `üåê ${displayName}`,
                        callback_data: `current_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };
        await bot.sendMessage(chatId, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === 'üåç –ú–æ–π IP' || text === '/myip') {
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }
        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? `${client.originalName} (Admin: ${client.adminId})` : name;
                    return [{
                        text: `üåç ${displayName}`,
                        callback_data: `myip_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };
        await bot.sendMessage(chatId, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:', keyboard);
        return;
    }

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (text === 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏' || text === '/manageadmins') {
        if (!superAdmin) {
            await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            return;
        }
        const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
        const message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

üìã –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: ${adminsList}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚Ä¢ \`+123456789\` - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`-123456789\` - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`list\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤`;
        userStates[userId] = { action: 'managing_admins' };
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∑–∞—â–∏—Ç–∞)
    const buttonCommands = [
        'üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üõí –î–æ–±–∞–≤–∏—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
        'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã', 'üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', 'üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏', 'üåç –ú–æ–π IP',
        'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 'üì• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
        'üõç –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É'
    ];
    if (buttonCommands.includes(text)) {
        if (userStates[userId]) {
            delete userStates[userId];
            log.debug(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: ${text}`);
        }
        await bot.sendMessage(chatId, `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.`, getKeyboardForUser(userId));
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (userStates[userId]) {
        const state = userStates[userId];

        // –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–∫—É–ø–∫–æ–π
        if (state.action === 'add_user_with_purchase') {
            switch (state.step) {
                case 'waiting_username': {
                    if (!text || text.length < 3) {
                        await bot.sendMessage(chatId, '‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    const existingUser = findClientByName(text, superAdmin ? null : userId);
                    if (existingUser) {
                        await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:');
                        return;
                    }
                    state.username = text;
                    state.step = 'waiting_password';
                    userStates[userId] = state;
                    await bot.sendMessage(chatId, `‚úÖ –õ–æ–≥–∏–Ω: ${text}\n\nüîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:`);
                    return;
                }
                case 'waiting_password': {
                    if (!text || text.length < 4) {
                        await bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                        return;
                    }
                    state.password = text;
                    state.step = 'confirming_purchase';
                    userStates[userId] = state;

                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É', callback_data: 'confirm_purchase' },
                                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_purchase' }
                                ]
                            ]
                        }
                    };
                    await bot.sendMessage(
                        chatId,
                        `üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n` +
                        `üë§ –õ–æ–≥–∏–Ω: ${state.username}\n` +
                        `üîê –ü–∞—Ä–æ–ª—å: ${state.password}\n` +
                        `üì¶ –ü—Ä–æ–∫—Å–∏: ${state.count} shared –Ω–∞ ${state.period} –¥–Ω–µ–π\n` +
                        `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ PROXY6\n\n` +
                        `‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–∫—Å–∏?`,
                        keyboard
                    );
                    return;
                }
            }
        }

        // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç "name [count] [period]")
        if (state.action === 'buying_proxy') {
            if (state.step === 'waiting_client_name') {
                const raw = text.trim();
                const parts = raw.split(/\s+/);
                const nameFromInput = parts[0];

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ [count] [period]
                if (parts.length >= 2) {
                    const requestedCount = parseInt(parts[1], 10);
                    if (!Number.isNaN(requestedCount) && requestedCount > 0) state.count = requestedCount;
                }
                if (parts.length >= 3) {
                    const requestedPeriod = parseInt(parts[2], 10);
                    if (!Number.isNaN(requestedPeriod) && requestedPeriod > 0) state.period = requestedPeriod;
                }

                const clientInfo = superAdmin
                    ? findClientByName(nameFromInput)
                    : findClientByName(nameFromInput, userId);

                if (!clientInfo) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${nameFromInput} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞`);
                    delete userStates[userId];
                    return;
                }

                if (!PROXY6_CONFIG.API_KEY) {
                    await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                    delete userStates[userId];
                    return;
                }

                await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –∏ —Ü–µ–Ω—É –≤ PROXY6...');
                const balanceCheck = await checkProxy6Balance();
                if (!balanceCheck.success) {
                    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PROXY6: ${balanceCheck.error}`);
                    delete userStates[userId];
                    return;
                }

                const priceCheck = await getProxy6Price(state.count, state.period, state.version);
                if (!priceCheck.success) {
                    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: ${priceCheck.error}`);
                    delete userStates[userId];
                    return;
                }

                if (parseFloat(balanceCheck.balance) < priceCheck.price) {
                    await bot.sendMessage(
                        chatId,
                        `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ PROXY6!\n\n` +
                        `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.balance} ${balanceCheck.currency}\n` +
                        `üí∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${priceCheck.price} ${priceCheck.currency}\n` +
                        `üìä –¶–µ–Ω–∞ –∑–∞ ${state.count} shared –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${state.period} –¥–Ω–µ–π`
                    );
                    delete userStates[userId];
                    return;
                }

                userStates[userId] = {
                    action: 'buying_proxy',
                    step: 'confirming_buy',
                    clientName: clientInfo.clientName || nameFromInput,
                    adminId: clientInfo.adminId,
                    count: state.count,
                    period: state.period,
                    country: state.country,
                    version: state.version,
                    currency: priceCheck.currency,
                    price: priceCheck.price
                };

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É', callback_data: 'confirm_buy_client' },
                                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_buy_client' }
                            ]
                        ]
                    }
                };

                await bot.sendMessage(
                    chatId,
                    `üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientInfo.clientName || nameFromInput}\n` +
                    `üì¶ –ü—Ä–æ–∫—Å–∏: ${state.count} shared –Ω–∞ ${state.period} –¥–Ω–µ–π\n` +
                    `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ PROXY6\n\n` +
                    `‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞?`,
                    keyboard
                );
                return;
            }
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        if (state.action === 'adding_client_with_proxies') {
            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ: –ø—Ä–æ–∫—Å–∏');
                return;
            }
            const firstLine = lines[0].trim().split(/\s+/);
            if (firstLine.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }
            const clientName = firstLine[0];
            const password = firstLine[1];
            const proxyLines = lines.slice(1);

            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            const proxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) proxies.push(proxy);
                    else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }
            if (proxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            adminClients[clientName] = { password, proxies };
            saveClients();

            try {
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName, password,
                    proxies: proxies.map(formatProxyForRailway).filter(Boolean)
                });
                await bot.sendMessage(
                    chatId,
                    `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}
   
üì• –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –ø–æ–∫—É–ø–∫–∏`,
                    getKeyboardForUser(userId)
                );
            } catch (error) {
                await bot.sendMessage(
                    chatId,
                    `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`,
                    getKeyboardForUser(userId)
                );
            }

            delete userStates[userId];
            return;
        }

        // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
        if (state.action === 'adding_client') {
            const lines = text.trim().split('\n');
            const parts = lines[0].trim().split(/\s+/);
            if (parts.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }
            const clientName = parts[0];
            const password = parts[1];

            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            adminClients[clientName] = { password, proxies: [] };
            saveClients();

            try {
                await makeProxyServerRequest('/api/add-client', 'POST', {
                    clientName, password,
                    proxies: []
                });
                await bot.sendMessage(
                    chatId,
                    `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: 0 —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}`,
                    getKeyboardForUser(userId)
                );
            } catch (error) {
                await bot.sendMessage(
                    chatId,
                    `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å 0 –ø—Ä–æ–∫—Å–∏
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`,
                    getKeyboardForUser(userId)
                );
            }

            delete userStates[userId];
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Ä—É–∫–∞–º–∏
        if (state.action === 'adding_proxy') {
            const lines = text.trim().split('\n');
            if (lines.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞\nhost:port:user:pass');
                return;
            }
            const clientName = lines[0].trim();
            const proxyLines = lines.slice(1);

            const clientInfo = superAdmin ? findClientByName(clientName) : findClientByName(clientName, userId);
            if (!clientInfo) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞`);
                delete userStates[userId];
                return;
            }
            if (!superAdmin && clientInfo.adminId != userId) {
                await bot.sendMessage(chatId, `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
                delete userStates[userId];
                return;
            }

            const newProxies = [];
            for (const proxyLine of proxyLines) {
                const proxy = proxyLine.trim();
                if (proxy) {
                    const parts = proxy.split(':');
                    if (parts.length === 4) newProxies.push(proxy);
                    else {
                        await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: ${proxy}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: host:port:user:pass`);
                        return;
                    }
                }
            }
            if (newProxies.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
                return;
            }

            const adminClients = getAdminClients(clientInfo.adminId);
            adminClients[clientInfo.clientName].proxies.push(...newProxies);
            saveClients();

            try {
                await addProxiesToServer(
                    clientInfo.clientName,
                    newProxies.map(formatProxyForRailway).filter(Boolean)
                );
            } catch (error) {
                log.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
            }

            await bot.sendMessage(
                chatId,
                `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newProxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}
üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${adminClients[clientInfo.clientName].proxies.length}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${clientInfo.adminId}`,
                getKeyboardForUser(userId)
            );

            delete userStates[userId];
            return;
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
        if (state.action === 'managing_admins' && superAdmin) {
            if (text === 'list') {
                const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
                await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${adminsList}`);
                return;
            }
            if (text.startsWith('+')) {
                const newAdminId = parseInt(text.substring(1));
                if (isNaN(newAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }
                if (admins.includes(newAdminId)) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }
                admins.push(newAdminId);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã`);
                return;
            }
            if (text.startsWith('-')) {
                const removeAdminId = parseInt(text.substring(1));
                if (isNaN(removeAdminId)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                    return;
                }
                const index = admins.indexOf(removeAdminId);
                if (index === -1) {
                    await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                    return;
                }
                admins.splice(index, 1);
                saveAdmins();
                await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤`);
                return;
            }
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +ID, -ID –∏–ª–∏ list');
            return;
        }
    }

    await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', getKeyboardForUser(userId));
});

// ===== CALLBACKS =====
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!isAuthorized(userId)) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
        return;
    }

    const superAdmin = isSuperAdmin(userId);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if (data === 'confirm_buy_client') {
        const st = userStates[userId];
        if (!st || st.action !== 'buying_proxy' || st.step !== 'confirming_buy') {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.' });
            return;
        }
        try {
            await bot.editMessageText('‚è≥ –ü–æ–∫—É–ø–∞—é –ø—Ä–æ–∫—Å–∏ –∏ –¥–æ–±–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—É...', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });

            const result = await buyProxiesForExistingClient({
                adminId: st.adminId,
                clientName: st.clientName,
                count: st.count,
                period: st.period,
                country: st.country,
                version: st.version
            });

            if (result.success) {
                const info = result.purchase_info;
                await bot.editMessageText(
                    `‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É!\n\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${st.clientName}\n` +
                    `üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.addedCount} –ø—Ä–æ–∫—Å–∏\n` +
                    (result.partialNote || '') + '\n\n' +
                    `üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ:\n` +
                    `üÜî –ó–∞–∫–∞–∑: ${info.order_id}\n` +
                    `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${info.price} ${info.currency || 'RUB'}\n` +
                    `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${info.count} –ø—Ä–æ–∫—Å–∏\n` +
                    `‚è∞ –ü–µ—Ä–∏–æ–¥: ${info.period} –¥–Ω–µ–π\n` +
                    `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${info.balance_remaining} ${info.currency || 'RUB'}`,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } else {
                await bot.editMessageText(
                    `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${result.error}`,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            }
        } catch (err) {
            await bot.editMessageText(
                `‚ùå –°–±–æ–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫—Å–∏: ${err.message}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        } finally {
            delete userStates[userId];
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        return;
    }

    if (data === 'cancel_buy_client') {
        delete userStates[userId];
        try {
            await bot.editMessageText('‚ùå –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
        } catch {}
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    if (data === 'confirm_purchase') {
        await handleConfirmPurchase(chatId, userId);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    if (data === 'cancel_purchase') {
        delete userStates[userId];
        await bot.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id
        });
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith('delete_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            await deleteClientFromServer(clientName);
        } catch (error) {
            log.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        }

        delete adminClients[clientName];
        saveClients();

        await bot.editMessageText(
            `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
            { chat_id: chatId, message_id: callbackQuery.message.message_id }
        );

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('current_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getCurrentProxy(clientName, adminClients[clientName].password);
            await bot.editMessageText(
                `üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.proxy || '–ù–µ –Ω–∞–π–¥–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${clientName}: ${error.message}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –ú–æ–π IP
    if (data.startsWith('myip_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];

        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        try {
            const result = await getMyIP(clientName, adminClients[clientName].password);
            await bot.editMessageText(
                `üåç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.ip || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –¥–ª—è ${clientName}: ${error.message}`,
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadClients();
loadAdmins();

log.info(`üöÄ Bot started | ProxyServer=${PROXY_SERVER_URL} | Proxy6=${PROXY6_CONFIG.API_KEY ? 'on' : 'off'} | Defaults: count=${PURCHASE_DEFAULTS.count}, period=${PURCHASE_DEFAULTS.period}, country=${PURCHASE_DEFAULTS.country}, ver=${PURCHASE_DEFAULTS.version}`);
log.debug(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID: ${SUPER_ADMIN_ID} | üë• –ê–¥–º–∏–Ω–æ–≤: ${admins.length}`);

// Health endpoint
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
    const totalClients = Object.values(clients).reduce((sum, adminClients) => sum + Object.keys(adminClients).length, 0);
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        total_clients: totalClients,
        admins_count: admins.length,
        proxy_server: PROXY_SERVER_URL,
        proxy6_configured: !!PROXY6_CONFIG.API_KEY,
        purchase_defaults: PURCHASE_DEFAULTS,
        clients_by_admin: Object.fromEntries(
            Object.entries(clients).map(([adminId, adminClients]) => [adminId, Object.keys(adminClients).length])
        )
    });
});

app.listen(PORT, () => {
    log.info(`üåê Health endpoint –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫ –≤–∏–¥—É http://user:pass@host:port
function formatProxyForRailway(proxy) {
    if (typeof proxy === 'string') {
        if (proxy.startsWith('http://') && proxy.includes('@')) return proxy;
        const parts = proxy.split(':');
        if (parts.length === 4) {
            const [host, port, user, pass] = parts;
            return `http://${encodeURIComponent(user)}:${encodeURIComponent(pass)}@${host}:${port}`;
        }
        return proxy;
    }
    if (proxy && proxy.host && proxy.port && proxy.user && proxy.pass) {
        return `http://${encodeURIComponent(proxy.user)}:${encodeURIComponent(proxy.pass)}@${proxy.host}:${proxy.port}`;
    }
    log.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:', proxy);
    return null;
}
